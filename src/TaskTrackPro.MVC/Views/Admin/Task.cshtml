@{
    Layout = "_CustomA";
}
<!-- Menu Section-->
<section class="main-section-menu bg-light bb-1">
    <ul class="main-section-menu-ul" id="mainSectionMenu">
        <li><a asp-action="Index" id="iAuditDashboard" class="ms-menu-link">Dashboard</a></li>
        <li><a asp-action="Members" id="iAuditTemplate" class="ms-menu-link">Members</a></li>
        <li><a href="javascript:void(0);" id="iAuditInspection" class="ms-menu-link active">Task</a></li>
        <li><a asp-action="Messages" id="iAuditAnalytics" class="ms-menu-link">Messages</a></li>
        <li><a id="logout" class="ms-menu-link">Logout</a></li>
    </ul>
</section>
<!--// Menu Section-->

<!--// Main Section-->
<div class="d-flex dashboard-wrapper justify-content-center align-items-center h100 mt-15 ">
    <div class="dashboard-left   d-flex flex-column h100">
        <div class="row-container h100">

            <div class="col-width-100 h100 ">
                <div class="scrum-dataimport-wrapper d-flex flex-column h100">
                    <div class="scrum-dataimport-header-block bg-light d-flex border mb-15">

                        <div class="searchbar w100 p-10 pb-5">
                            <div class="clear-input search-box w100">
                                <input type="text" name="txtTagListSearch" id="TaskElaticInput" aria-label="tag name"
                                    class="form-control k-textbox k-valid" placeholder="Search Task Title here...">
                                <i class="icon-search" aria-hidden="true"></i>
                                <a role="button" id="ElasticClear" aria-label="Clear Search" href="javascript:void(0);"
                                    class="btn-icn-hover close icon-cancel" data-ara-title="Clear Search"></a>
                            </div>
                            <div class="action-div d-flex">
                                <a href="javascript:void(0);" class="btn btn-raised btn-primary btn-block mr-5"
                                    role="button" aria-haspopup="true" aria-expanded="false" id="TaskElaticSearch"><i
                                        aria-hidden="true" class="icon-search"></i><span>Search</span></a>


                                <a href="javascript:void(0);"
                                    class="btn btn-raised btn-primary btn-add-task btn-block ml-5" role="button"
                                    aria-haspopup="true" aria-expanded="false" id="actionbtnmenu1"><i aria-hidden="true"
                                        class="icon-add"></i><span>Task</span></a>
                            </div>
                        </div>

                    </div>
                    <div class="flex-1 overflow-auto">
                        <div class="grid-wrapper h100 dataimport-grid">
                            <div id="taskGrid"></div>
                            <div id="Dataimportgrid-pager" class="with-more-option"></div>
                        </div>
                    </div>
                </div>
                <div class="flex-1 overflow-auto">
                    <div class="grid-wrapper h100 dataimport-grid">
                        <div id="taskGrid m-15"></div>
                        <div id="Dataimportgrid-pager" class="with-more-option"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>



<div id="task-window-table">
    <div class="window-wrapper">
        <form id="taskForm">
            <div class="form-group">
                <label>Task Title</label>
                <input id="taskName" type="text" class="form-control" title="table name">
            </div>
            <div class="form-group mb-10">
                <label for="usersList">Select Member</label>
                <select id="usersList" class="form-control">
                    <option disabled selected value="">Select Member</option>
                </select>
            </div>
            <div class="form-group mb-10">
                <label for="startdatetimepicker">Start Date Timepicker</label>
                <input id="startdatetimepicker" class="form-control" title="date timepicker" />
            </div>
            <div class="form-group mb-10">
                <label for="enddatetimepicker">End Date Timepicker</label>
                <input id="enddatetimepicker" class="form-control" title="date timepicker" />
            </div>
            <div class="form-group">
                <label>Description <span class="text-muted">(Optional)</span></label>
                <textarea id="taskDescription" class="form-control" rows="4" placeholder="Write here"
                    title="description"></textarea>
            </div>
        </form>
    </div>
    <div class="window-footer">
        <a class="btn btn-trans close-window">Cancel</a><a id="addTaskBtn" class="btn btn-primary">Save</a>
    </div>
</div>

@* Delete Task Model *@
<div id="delete-window-table">
    <div class="window-wrapper">
        <input id="DeltaskId" hidden type="text">
        <div class="mb-10">
            <h5 class="fw-bolder">Task Name</h5>
            <p id="DelTaskTitle">This is task name</p>
        </div>
        <div class="mb-10">
            <h5 class="fw-bolder">Member</h5>
            <p id="DelusersList">Henil</p>
        </div>
        <div class="mb-10">
            <h5 class="fw-bolder">Task Status</h5>
            <p>Complete</p>
        </div>
        <div class="mb-10">
            <h5 class="fw-bolder">Task Duration</h5>
            <p>

                <span id="Delstartdatetimepicker"></span> -- <span id="Delenddatetimepicker"></span>
            </p>
        </div>
        <div class="mb-10">
            <h5 class="fw-bolder">Task Description</h5>
            <p id="DeltaskDescription"></p>
        </div>
    </div>
    <div class="window-footer">
        <a class="btn btn-trans close-window">Cancel</a><a id="DelTask" class="btn btn-primary">Delete</a>
    </div>
</div>

@* Edit Task Model *@
<div id="edit-window-table">
    <div class="window-wrapper">
        <form>
            <input hidden type="text" id="taskId">
            <div class="form-group">
                <label>Task Title</label>
                <input id="UpdateTaskTitle" type="text" class="form-control">
            </div>
            <div class="form-group mb-10">
                <label for="UpdateusersList">Select Member</label>
                <select id="UpdateusersList" class="form-control">
                    <option disabled selected value="">Select Member</option>
                </select>
            </div>
            <div class="form-group mb-10">
                <label for="Updatestartdatetimepicker">Start Date Timepicker</label>
                <input id="Updatestartdatetimepicker" class="form-control" title="date timepicker" />
            </div>
            <div class="form-group mb-10">
                <label for="Updateenddatetimepicker">End Date Timepicker</label>
                <input id="Updateenddatetimepicker" class="form-control" title="date timepicker" />
            </div>
            <div class="form-group mb-10">
                <label for="Updatestatus">Update Status</label>
                <select id="Updatestatus" class="form-control">
                    <option value="">Select Status</option>
                    <option value="Complete">Complete</option>
                    <option value="In Progress">In Progress</option>
                    <option value="Pending">Pending</option>
                </select>
            </div>
            <div class="form-group">
                <label>Description <span class="text-muted">(Optional)</span></label>
                <textarea id="UpdatetaskDescription" class="form-control" rows="4" placeholder="Write here"
                    title="description"></textarea>
            </div>
        </form>
    </div>
    <div class="window-footer">
        <a class="btn btn-trans close-window">Cancel</a><a id="updateTaskBtn" class="btn btn-primary">Save</a>
    </div>
</div>
@* Show Add Task Model *@
<script>
    $("#task-window-table").kendoWindow({
        width: 450,
        title: "Add New Task",
        visible: false,
        draggable: false,
        resizable: false,
        actions: [
            "Close"
        ],
        modal: true
    }).data("kendoWindow");

    $(document).on('click', '.btn-add-task', function () {
        $("#task-window-table").data("kendoWindow").center().open();
    });
</script>

@* Delete Task *@
<script>

    $("#delete-window-table").kendoWindow({
        width: 450,
        title: "Delete Task",
        visible: false,
        draggable: false,
        resizable: false,
        actions: [
            "Close"
        ],
        modal: true
    }).data("kendoWindow");

    $(document).on('click', '.btn-delete-task', function () {
        $("#delete-window-table").data("kendoWindow").center().open();
    });

</script>

@* Edit Task *@
<script>
    $("#edit-window-table").kendoWindow({
        width: 450,
        title: "Edit Task",
        visible: false,
        draggable: false,
        resizable: false,
        actions: [
            "Close"
        ],
        modal: true
    }).data("kendoWindow");
    $(document).on('click', '.btn-edit-task', function () {
        $("#edit-window-table").data("kendoWindow").center().open();
    });
</script>

@* Select Status *@
<script>

    $("#autoComplete").kendoAutoComplete({
        minLength: 3,
        dataTextField: "ContactName", // JSON property name to use
        dataSource: new kendo.data.DataSource({
            type: "odata", // specifies data protocol
            transport: {
                read: "https://demos.telerik.com/kendo-ui/service/Northwind.svc/Customers"
            }
        })
    });

    $("#multiSelectDropdown").kendoDropDownList();


    $("#startdatetimepicker").kendoDateTimePicker({
        value: new Date()
    });
    $("#enddatetimepicker").kendoDateTimePicker({
        value: new Date()
    });

</script>

@* Ajax API Call *@
<script>
    $(document).ready(function () {
        const apiUrl = "http://localhost:5136/api/task"; // Change the port if needed
        LoaduserData();
        // Add Task
        $("#addTaskBtn").click(function () {
            // Collect form data
            var taskData = {
                c_uid: $("#usersList").val(),  // Assuming this input holds user ID
                c_task_title: $("#taskName").val(),
                c_start_date: new Date($("#startdatetimepicker").val()).toISOString(), // Convert to ISO format
                c_end_date: new Date($("#enddatetimepicker").val()).toISOString(),
                c_description: $("#taskDescription").val(),
                c_task_status: "PENDING" // Default status
            };

            $.ajax({
                url: apiUrl + "/add",
                type: "POST",
                contentType: "application/json",
                data: JSON.stringify(taskData),
                success: function (response) {
                    alert("Task added successfully!")
                    alert(response.message);
                    $("#taskForm")[0].reset(); // Clear form fields
                    $("#taskGrid").data("kendoGrid").dataSource.read(); // Refresh grid if needed
                },
                error: function (xhr) {
                    alert("Error adding task: " + xhr.responseText);
                }
            });
        });

        // Get All Users
        function LoaduserData_NIU() {
            $.ajax({
                url: apiUrl + "/users",
                type: "GET",
                success: function (users) {
                    console.log(users);

                },
                error: function (xhr) {
                    alert("Error fetching users: " + xhr.responseText);
                }
            });
        };

        // Get Approved Usernames
        function LoaduserData() {
            $.ajax({
                url: apiUrl + "/approved-users",
                type: "GET",
                success: function (users) {
                    console.log(users);
                    let usersDropdown = $("#usersList");
                    let usersDropdown2 = $("#UpdateusersList");
                    users.forEach(user => {
                        let option = `<option value="${user.c_uid}">${user.Email}</option>`;
                        usersDropdown.append(option);
                        usersDropdown2.append(option);
                    });
                },
                error: function (xhr) {
                    alert("Error fetching approved users: " + xhr.responseText);
                }
            });
        };

        // Approve User
        $("#approveUserBtn").click(function () {
            let userId = $("#userId").val();
            $.ajax({
                url: apiUrl + "/approve/" + userId,
                type: "PUT",
                success: function (response) {
                    alert(response.message);
                },
                error: function (xhr) {
                    alert("Error approving user: " + xhr.responseText);
                }
            });
        });

        // Update Task
        $("#updateTaskBtn").click(function () {
            let updatedTask = {
                c_tid: $("#taskId").val(),
                c_uid: 24,  // Assuming this input holds user ID
                c_task_title: $("#UpdateTaskTitle").val(),
                c_start_date: new Date($("#Updatestartdatetimepicker").val()).toISOString(), // Convert to ISO format
                c_end_date: new Date($("#Updateenddatetimepicker").val()).toISOString(),
                c_description: $("#UpdatetaskDescription").val(),
                c_task_status: $("#Updatestatus").val() // Default status
            };

            $.ajax({
                url: apiUrl + "/update",
                type: "PUT",
                contentType: "application/json",
                data: JSON.stringify(updatedTask),
                success: function (response) {
                    alert(response.message);
                    $("#taskGrid").data("kendoGrid").dataSource.read();
                },
                error: function (xhr) {
                    alert("Error updating task: " + xhr.responseText);
                }
            });
        });

        // Delete Task
        $("#DelTask").click(function () {
            let taskId = $("#DeltaskId").val();
            $.ajax({
                url: apiUrl + "/delete/" + taskId,
                type: "DELETE",
                success: function (response) {
                    alert(response.message);
                    $("#taskGrid").data("kendoGrid").dataSource.read(); // Refresh grid if needed
                },
                error: function (xhr) {
                    alert("Error deleting task: " + xhr.responseText);
                }
            });
        });
    });
</script>

<script>
    $(document).ready(function () {
        LoadGridData()
        $('#ElasticClear').click(function () {
            window.location.reload();
        })

        function LoadGridData() {
            // Fetch Data from API
            var taskDataSource = new kendo.data.DataSource({
                transport: {
                    read: {
                        url: "http://localhost:5136/api/task/tasks",
                        dataType: "json"
                    }
                },
                pageSize: 5,
                schema: {
                    model: {
                        id: "c_tid",
                        fields: {
                            c_tid: { type: "number" },
                            c_uid: { type: "number" },
                            c_task_title: { type: "string" },
                            c_description: { type: "string" },
                            c_start_date: { type: "date" },
                            c_end_date: { type: "date" },
                            c_task_status: { type: "string" }
                        }
                    }
                }
            });

            // Initialize Kendo Grid
            $("#taskGrid").kendoGrid({
                dataSource: taskDataSource,
                height: 400,
                pageable: {
                    refresh: true,
                    pageSizes: [5, 10, 20],
                    buttonCount: 3
                },
                sortable: true,
                filterable: true,
                resizable: true,
                columns: [
                    { field: "c_tid", title: "Task ID", width: 80 },
                    { field: "c_uid", title: "User ID", width: 80 },
                    { field: "c_task_title", title: "Task Title", width: 150 },
                    { field: "c_description", title: "Description", width: 200 },
                    {
                        field: "c_start_date",
                        title: "Start Date",
                        width: 120,
                        format: "{0:yyyy-MM-dd}"
                    },
                    {
                        field: "c_end_date",
                        title: "End Date",
                        width: 120,
                        format: "{0:yyyy-MM-dd}"
                    },
                    { field: "c_task_status", title: "Status", width: 100 },
                    {
                        title: "Actions",
                        template: "<button class='btn-edit-task btn btn-warning btn-sm'><i class='icon-edit'></i></button> <button class='btn-delete-task btn btn-danger btn-sm'><i class='icon-delete'></i></button>",
                        width: 120
                    }
                ],
                dataBound: function () {
                    $(".btn-edit-task").click(function () {
                        var grid = $("#taskGrid").data("kendoGrid");
                        var row = $(this).closest("tr");
                        var dataItem = grid.dataItem(row);

                        if (dataItem) {
                            $("#taskId").val(dataItem.c_tid);
                            $("#UpdateTaskTitle").val(dataItem.c_task_title);
                            $("#UpdateusersList").val(dataItem.c_uid);
                            $("#Updatestartdatetimepicker").val(new Date(dataItem.c_start_date).toISOString().slice(0, 16));
                            $("#Updateenddatetimepicker").val(new Date(dataItem.c_end_date).toISOString().slice(0, 16));
                            $("#UpdatetaskDescription").val(dataItem.c_description);
                        }
                    });

                    $(".btn-delete-task").click(function () {
                        var grid = $("#taskGrid").data("kendoGrid");
                        var row = $(this).closest("tr");
                        var dataItem = grid.dataItem(row);

                        if (dataItem) {
                            $("#DeltaskId").val(dataItem.c_tid);
                            $("#DelTaskTitle").html(dataItem.c_task_title);
                            $("#DelusersList").html(dataItem.c_uid);
                            $("#Delstartdatetimepicker").html(new Date(dataItem.c_start_date).toISOString().slice(0, 16));
                            $("#Delenddatetimepicker").html(new Date(dataItem.c_end_date).toISOString().slice(0, 16));
                            $("#DeltaskDescription").html(dataItem.c_description);
                        }
                    });
                },
                scrollable: true
            });

            // Initialize Pager
            $("#taskPager").kendoPager({
                dataSource: taskDataSource
            });
        }
    });

</script>

<script>
    $("#TaskElaticSearch").click(function () {
        var searchWord = $('#TaskElaticInput').val()
        // Fetch Data from API
        var taskDataSource = new kendo.data.DataSource({
            transport: {
                read: {
                    url: "http://localhost:5136/api/Admin/" + searchWord,
                    dataType: "json"
                }
            },
            pageSize: 5,
            schema: {
                model: {
                    id: "c_tid",
                    fields: {
                        c_tid: { type: "number" },
                        c_uid: { type: "number" },
                        c_task_title: { type: "string" },
                        c_description: { type: "string" },
                        c_start_date: { type: "date" },
                        c_end_date: { type: "date" },
                        c_task_status: { type: "string" }
                    }
                }
            }
        });

        // Initialize Kendo Grid
        $("#taskGrid").kendoGrid({
            dataSource: taskDataSource,
            height: 400,
            pageable: {
                refresh: true,
                pageSizes: [5, 10, 20],
                buttonCount: 3
            },
            sortable: true,
            filterable: true,
            resizable: true,
            columns: [
                { field: "c_tid", title: "Task ID", width: 80 },
                { field: "c_uid", title: "User ID", width: 80 },
                { field: "c_task_title", title: "Task Title", width: 150 },
                { field: "c_description", title: "Description", width: 200 },
                {
                    field: "c_start_date",
                    title: "Start Date",
                    width: 120,
                    format: "{0:yyyy-MM-dd}"
                },
                {
                    field: "c_end_date",
                    title: "End Date",
                    width: 120,
                    format: "{0:yyyy-MM-dd}"
                },
                { field: "c_task_status", title: "Status", width: 100 },
                {
                    title: "Actions",
                    template: "<button class='btn-edit-task btn btn-warning btn-sm'><i class='icon-edit'></i></button> <button class='btn-delete-task btn btn-danger btn-sm'><i class='icon-delete'></i></button>",
                    width: 120
                }
            ],
            dataBound: function () {
                $(".btn-edit-task").click(function () {
                    var grid = $("#taskGrid").data("kendoGrid");
                    var row = $(this).closest("tr");
                    var dataItem = grid.dataItem(row);

                    if (dataItem) {
                        $("#taskId").val(dataItem.c_tid);
                        $("#UpdateTaskTitle").val(dataItem.c_task_title);
                        $("#UpdateusersList").val(dataItem.c_uid);
                        $("#Updatestartdatetimepicker").val(new Date(dataItem.c_start_date).toISOString().slice(0, 16));
                        $("#Updateenddatetimepicker").val(new Date(dataItem.c_end_date).toISOString().slice(0, 16));
                        $("#UpdatetaskDescription").val(dataItem.c_description);
                    }
                });

                $(".btn-delete-task").click(function () {
                    var grid = $("#taskGrid").data("kendoGrid");
                    var row = $(this).closest("tr");
                    var dataItem = grid.dataItem(row);

                    if (dataItem) {
                        $("#DeltaskId").val(dataItem.c_tid);
                        $("#DelTaskTitle").html(dataItem.c_task_title);
                        $("#DelusersList").html(dataItem.c_uid);
                        $("#Delstartdatetimepicker").html(new Date(dataItem.c_start_date).toISOString().slice(0, 16));
                        $("#Delenddatetimepicker").html(new Date(dataItem.c_end_date).toISOString().slice(0, 16));
                        $("#DeltaskDescription").html(dataItem.c_description);
                    }
                });
            },
            scrollable: true
        });

        // Initialize Pager
        $("#taskPager").kendoPager({
            dataSource: taskDataSource
        });
    })
</script>
<script>
    $(document).ready(function () {
        $("#logout").on("click", function (e) {
            e.preventDefault();
            sessionStorage.clear()
            sessionStorage.removeItem("userEmail");
            window.location.replace("/Home/Login");
        });
    });
</script>
